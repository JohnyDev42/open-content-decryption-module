diff --git a/chrome/renderer/media/chrome_key_systems.cc b/chrome/renderer/media/chrome_key_systems.cc
index c1db59a..950ec59 100644
--- a/chrome/renderer/media/chrome_key_systems.cc
+++ b/chrome/renderer/media/chrome_key_systems.cc
@@ -48,6 +48,50 @@ static bool IsPepperCdmAvailable(
   return is_available;
 }
 
+// External Open CDM.
+static void AddExternalOpenCdm(
+    std::vector<KeySystemInfo>* concrete_key_systems) {
+  static const char kExternalOpenCdmKeySystem[] =
+      "com.microsoft.playready";
+  static const char kExternalOpenCdmPepperType[] =
+      "application/x-ppapi-open-cdm";
+
+  std::vector<base::string16> additional_param_names;
+  std::vector<base::string16> additional_param_values;
+  if (!IsPepperCdmAvailable(kExternalOpenCdmPepperType,
+                             &additional_param_names,
+                             &additional_param_values)) {
+    return;
+  }
+
+  KeySystemInfo info;
+  info.key_system = kExternalOpenCdmKeySystem;
+  info.supported_codecs |= media::EME_CODEC_WEBM_ALL;
+  info.supported_init_data_types |= media::kInitDataTypeMaskWebM;
+  #if defined (USE_PROPRIETARY_CODECS)
+  info.supported_codecs |= media::EME_CODEC_MP4_ALL;
+  info.supported_init_data_types |= media::kInitDataTypeMaskCenc;
+  #endif
+
+  info.max_audio_robustness = media::EmeRobustness::EMPTY;
+  info.max_video_robustness = media::EmeRobustness::EMPTY;
+
+  // Persistent sessions are faked.
+   info.persistent_license_support = media::EmeSessionTypeSupport::SUPPORTED;
+  info.persistent_release_message_support =
+      media::EmeSessionTypeSupport::NOT_SUPPORTED;
+  info.persistent_state_support = media::EmeFeatureSupport::REQUESTABLE;
+  info.distinctive_identifier_support = media::EmeFeatureSupport::NOT_SUPPORTED;
+
+
+
+  info.pepper_type = kExternalOpenCdmPepperType;
+
+  concrete_key_systems->push_back(info);
+
+}
+
+
 // External Clear Key (used for testing).
 static void AddExternalClearKey(
     std::vector<KeySystemInfo>* concrete_key_systems) {
@@ -218,7 +262,7 @@ static void AddPepperBasedWidevine(
 void AddChromeKeySystems(std::vector<KeySystemInfo>* key_systems_info) {
 #if defined(ENABLE_PEPPER_CDMS)
   AddExternalClearKey(key_systems_info);
-
+  AddExternalOpenCdm(key_systems_info);
 #if defined(WIDEVINE_CDM_AVAILABLE)
   AddPepperBasedWidevine(key_systems_info);
 #endif  // defined(WIDEVINE_CDM_AVAILABLE)
diff --git a/media/base/key_systems.cc b/media/base/key_systems.cc
index 32fa1c7..55002bd 100644
--- a/media/base/key_systems.cc
+++ b/media/base/key_systems.cc
@@ -152,6 +152,10 @@ static bool IsPotentiallySupportedKeySystem(const std::string& key_system) {
   if (IsExternalClearKey(key_system))
     return true;
 
+  // Linaro: External playready
+  if (key_system == kPlayreadyKey)
+    return true;
+
   // Chromecast defines behaviors for Cast clients within its reverse domain.
   const char kChromecastRoot[] = "com.chromecast";
   if (IsParentKeySystemOf(kChromecastRoot, key_system))
diff --git a/media/cdm/key_system_names.cc b/media/cdm/key_system_names.cc
index 1782203..3ffe7e6 100644
--- a/media/cdm/key_system_names.cc
+++ b/media/cdm/key_system_names.cc
@@ -8,6 +8,7 @@
 namespace media {
 
 const char kClearKey[] = "org.w3.clearkey";
+const char kPlayreadyKey[] = "com.microsoft.playready";
 const char kExternalClearKey[] = "org.chromium.externalclearkey";
 
 bool IsClearKey(const std::string& key_system) {
diff --git a/media/cdm/key_system_names.h b/media/cdm/key_system_names.h
index 6c388b98..186c85f 100644
--- a/media/cdm/key_system_names.h
+++ b/media/cdm/key_system_names.h
@@ -16,6 +16,9 @@ namespace media {
 // The key system name for Clear Key.
 MEDIA_EXPORT extern const char kClearKey[];
 
+// The key system name for Playready
+MEDIA_EXPORT extern const char kPlayreadyKey[];
+
 // The key system name for External Clear Key.
 MEDIA_EXPORT extern const char kExternalClearKey[];
 
diff --git a/media/media.gyp b/media/media.gyp
index f041c15..780bb54 100644
--- a/media/media.gyp
+++ b/media/media.gyp
@@ -45,6 +45,7 @@
   },
   'includes': [
     'media_cdm.gypi',
+    './cdm/ppapi/external_open_cdm/browser/media_open_cdm.gypi',
   ],
   'targets': [
     {
